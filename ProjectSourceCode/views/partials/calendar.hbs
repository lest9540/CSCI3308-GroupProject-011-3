<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    {{!-- Calendar Arrows --}}
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"
        integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A=="
        crossorigin="anonymous"
        referrerpolicy="no-referrer"
    />

    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: left;
        }

        /* Styling for the calendar itself */
        #calendar {
            width: 300px;
            margin: 20px auto;
        }

        .monthTitle {
            margin-top: 50px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .days, .dates {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
        }

        .day, .date {
            padding: 10px;
            border: 1px solid #f4f4f4; /* Changes the grid lines */
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        /* Styling for the calendar's identification that there is a transaction due on that day */ 
        .date.hasTransaction {
            position: relative;
        }

        .date.hasTransaction::after {
            content: "";
            position: absolute;
            bottom: 9px;
            width: 13px;
            height: 3px;
            background-color: #51aeff; /* CHANGES THE COLOR OF THE LINE INDICATOR */
            border-radius: 2px; /* Rounds the line out */
        }

        /* Styling that just indicates on calendar what today is*/
        .today {
            background-color: #a4c8ff;
            color: white;
            border-radius: 50%;
        }

        /* Styling that moves the calendar to the right half of the screen */
        .rightHalf {
            position: absolute;
            left: 53%;
            width: 50%;
            display: flex;
            justify-content: flex-start; 
            align-items: center; 
        }

        /* Styling for showing the transactions */
        .menu {
            width: 83%;
            right: 50%;
            margin-top: 3vh;
            min-height: 550px;
            color: #fff
            display: flex;

            border-radius: 10px;
            background-color: #f4f4f4;
            flex-direction: column; 
            align-items: flex-start;
            padding-left: 20px;
        }

        .menuContent {
            width: 100%;
        }


        /*SHOWS THE TRANSACTIONS FOR THE CORRESPONDING DAY */
        .menuTransactions {
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 10px;
            padding: 10px;
            margin-bottom: 10px;
            text-align: left;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-width: 67%;
        }


        .date.selected {
            background-color: #007bff;
            color: white;
            border-radius: 50%;
        }
        </style>
    </head>

    <body>
        <div class = "rightHalf"> {{!-- Shifts the calendar to be on the right side of the screen--}}
            <div id="calendar">
                {{!-- Display of the Month and Year --}}
                <div class="monthTitle">
                    {{!-- Note the fa fa-angle stuff is using the linked style for the arrows on the calendar  --}}
                    <i class = "fa fa-angle-left prev" onclick="changeMonth(-1)"></i> {{!-- Using calendar arrows --}}
                    <h2 id="monthYear"></h2>
                    <i class = "fa fa-angle-right next" onclick="changeMonth(1)"></i> {{!-- Using calendar arrows --}}
                </div>

                {{!-- Buttons for Today --}}
                <div>
                    <button onclick="todayBut()" class="btn btn-primary" style="margin-right: 250px; margin-bottom: 10px">Today</button>
                </div>

                {{!-- For the Days of the week for calendar --}}
                <div class="days">
                    <div class="day">S</div><div class="day">M</div><div class="day">T</div>
                    <div class="day">W</div><div class="day">Th</div><div class="day">F</div>
                    <div class="day">Sa</div>
                </div>

                <div class="dates" id="dates"></div>
            </div>

            {{!-- Functions to get the current date and set the calendar up, etc. --}}
            <script>
                let currentDate = new Date();
                let selectedDay = null; // used for a selected date

                // Used to basically reload the calendar with updated changes -> today date, users picking a date, changing month, etc.
                async function renderCalendar(date) 
                {
                    const year = date.getFullYear();
                    const month = date.getMonth();
                    const firstDay = new Date(year, month, 1).getDay();
                    const lastDate = new Date(year, month + 1, 0).getDate();
                    const today = new Date();

                    // Get transaction dates for this month (underline indicator)
                    let transactionDates = [];
                    try {
                        const response = await fetch(`/api/transaction-dates?month=${month + 1}&year=${year}`); // gets the days that have transactions due 
                        transactionDates = await response.json(); // Use await because we need to make sure it gets through all 29/30/31 days
                    } catch (err) {
                        console.error('Error fetching transaction dates:', err);
                    }

                    document.getElementById("monthYear").innerText =
                        date.toLocaleString("default", { month: "long" }) + " " + year;

                    const datesEl = document.getElementById("dates");
                    datesEl.innerHTML = "";

                    // Makes the days for the calendar
                    for (let i = 0; i < firstDay; i++) {
                        datesEl.innerHTML += `<div class="date"></div>`;
                    }
                    // Sets up the days for the calendar
                    for (let day = 1; day <= lastDate; day++) {
                        const selectDay = new Date(year, month, day);
                        const isoDate = selectDay.toISOString().split("T")[0];

                        // Variable that holds what day it is today
                        const isToday =
                            day === today.getDate() &&
                            month === today.getMonth() &&
                            year === today.getFullYear();
                        // Variable that holds what day the user has selected
                        const isSelected =
                            selectedDay &&
                            day === selectedDay.getDate() &&
                            month === selectedDay.getMonth() &&
                            year === selectedDay.getFullYear();

                        // Used for indication of days that have a transaction (underline on calendar)
                        const hasTransaction = transactionDates.includes(isoDate);

                        // Used for the day that the user is selecting / selected
                        const dayDiv = document.createElement("div");
                        dayDiv.className = "date" +
                            (isToday ? " today" : "") +
                            (isSelected ? " selected" : "") +
                            (hasTransaction ? " hasTransaction" : "");

                        dayDiv.textContent = day;
                        dayDiv.addEventListener("click", () => {
                            selectedDay = selectDay;
                            renderCalendar(currentDate);
                            showSelectedDay();
                        });
                        datesEl.appendChild(dayDiv);
                    }
                }
                renderCalendar(currentDate);

                // Function that changes the month with the arrows 
                function changeMonth(offset) {
                    currentDate.setMonth(currentDate.getMonth() + offset);
                    renderCalendar(currentDate);
                }

                // Function that automatically selects todays date and shows transactions due "today"
                async function todayBut() {
                    currentDate = new Date();
                    selectedDay = new Date();

                    await renderCalendar(currentDate);

                    // Find the calendar cell that represents today
                    const dateCells = document.querySelectorAll('.date');
                    for (const cell of dateCells) { // goes through all date cell and looks for the date that is today
                        if (cell.classList.contains('today')) {
                            cell.click(); // Acts as if the user is clicking on todays date
                            break;
                        }
                    }
                }

                // Changes the transactions due to match the date that the user has selected
                function showSelectedDay() {
                    const display = document.querySelector(".menu h3");
                    
                    // Holder for the text when you have no date selected
                    const placeholder = document.getElementById("placeholderText");
                            if (placeholder) placeholder.remove();

                    // Holds the day that the user selected
                    if (selectedDay) {
                        const formatted = selectedDay.toLocaleDateString("default", { //toLocaleDateString formats it to match how the date is written in your region
                            weekday: 'long',
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                        });
                        display.textContent = formatted;

                        // Holds the date that the user has selected on
                        const dateString = selectedDay.toISOString().split("T")[0]; // Commands readjusts the taken date and writes it in a nice format

                        // Is fetching data from the database -> fetching the data from the index.js 
                        fetch(`/api/transactions?date=${dateString}`)
                            .then(response => response.json()) // Converts the data into an array because we are presenting the transactions as a list

                            // Start presenting the transactions due on the day selected
                            .then(data => 
                            {
                                const menu = document.querySelector(".menu");

                                // Removes old transactions from date previously clicked
                                const oldData = menu.querySelector(".transactions");
                                if (oldData) oldData.remove();

                                const transactionContainer = document.createElement("div");
                                transactionContainer.className = "transactions";
                                transactionContainer.style.marginLeft = "20px"; // Style for the transactions 

                                if (data.length === 0) { // Shows text that user has no transactions due on this particular day
                                    transactionContainer.innerHTML = "<h3 class='menuText'>No transactions on this day.</h3>";
                                } else { // If there are transactions due on that day
                                    data.forEach(tx => {
                                        // Presents the transactions in a list format
                                        const txHtml = `
                                            <div class="menuTransactions">
                                                <p><strong>${tx.name}</strong></p>
                                                <p>Amount: $${tx.amount}</p>
                                                <p>Balance after: $${tx.final_balance}</p>
                                            </div>`;

                                        transactionContainer.innerHTML += txHtml;
                                    });
                                }

                                menu.appendChild(transactionContainer);
                            })
                            .catch(err => console.error('Fetch error:', err));
                    }
                }

            </script>
        </div>

        {{!-- Show Transactions Side --}}
        <div class="menu"> 
            <div class="menuContent">
                <h3 class="menuText" style="margin-top: 20px;">Transactions Due</h3>

                <div id="placeholderText">
                    <h3 class="menuText">Nothing selected yet</h3>
                </div>

            </div>
        </div>

    </body>
</html>
